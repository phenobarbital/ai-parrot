name: Python package build and publish with uv

on:
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libmemcached-dev \
            libmemcached11 \
            libmemcached-tools \
            libsasl2-dev \
            libssl-dev \
            zlib1g-dev \
            build-essential \
            python3-dev \
            pkg-config

      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Install dependencies and build
        run: |
          # Install build dependencies first
          uv add --dev build twine
          # Try to sync with fallback for problematic packages
          uv sync --all-extras || uv sync --extra=dev
          # Build the package
          uv build --wheel

      - name: Upload wheel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-ubuntu-py${{ matrix.python-version }}
          path: dist/*.whl

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    environment:
      name: pypi
      url: https://pypi.org/p/ai-parrot
    permissions:
      id-token: write  # For trusted publishing
    steps:
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist-artifacts

      - name: Move wheel files to dist directory
        run: |
          mkdir -p dist
          find dist-artifacts -name '*.whl' -exec mv {} dist/ \;

      - name: List files in dist
        run: ls -l dist

      - name: Publish to PyPI
        run: |
          uv tool install twine
          uv tool run twine upload dist/* --username __token__ --password ${{ secrets.NAV_AIPARROT_API_SECRET }}
